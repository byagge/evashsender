from django.core.management.base import BaseCommand
from django.core.cache import cache
from django.db import connection
from django.conf import settings
import redis
import smtplib
import time


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--full',
            action='store_true',
            help='–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        )

    def handle(self, *args, **options):
        self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã VashSender...')
        
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        checks.append(self.check_database())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        checks.append(self.check_redis())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery
        checks.append(self.check_celery())
        
        if options['full']:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP
            checks.append(self.check_smtp())
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            checks.append(self.check_cache())
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            checks.append(self.check_static_files())
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.stdout.write('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:')
        self.stdout.write('=' * 50)
        
        all_passed = True
        for check in checks:
            status = '‚úÖ' if check['status'] else '‚ùå'
            self.stdout.write(f"{status} {check['name']}: {check['message']}")
            if not check['status']:
                all_passed = False
        
        self.stdout.write('=' * 50)
        
        if all_passed:
            self.stdout.write(
                self.style.SUCCESS('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.')
            )
        else:
            self.stdout.write(
                self.style.ERROR('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
            )
    
    def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                cursor.fetchone()
            return {
                'name': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
                'status': True,
                'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ'
            }
        except Exception as e:
            return {
                'name': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
                'status': False,
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    def check_redis(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            r = redis.Redis.from_url(settings.CELERY_BROKER_URL)
            r.ping()
            return {
                'name': 'Redis',
                'status': True,
                'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ'
            }
        except Exception as e:
            return {
                'name': 'Redis',
                'status': False,
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    def check_celery(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Celery"""
        try:
            from celery import current_app
            inspect = current_app.control.inspect()
            stats = inspect.stats()
            
            if stats:
                active_workers = len(stats)
                return {
                    'name': 'Celery',
                    'status': True,
                    'message': f'{active_workers} –∞–∫—Ç–∏–≤–Ω—ã—Ö worker –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
                }
            else:
                return {
                    'name': 'Celery',
                    'status': False,
                    'message': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö worker –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
                }
        except Exception as e:
            return {
                'name': 'Celery',
                'status': False,
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'
            }
    
    def check_smtp(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            smtp = smtplib.SMTP(
                settings.EMAIL_HOST,
                settings.EMAIL_PORT,
                timeout=10
            )
            
            if settings.EMAIL_USE_TLS:
                smtp.starttls()
            
            if settings.EMAIL_HOST_USER and settings.EMAIL_HOST_PASSWORD:
                smtp.login(settings.EMAIL_HOST_USER, settings.EMAIL_HOST_PASSWORD)
            
            smtp.quit()
            
            return {
                'name': 'SMTP',
                'status': True,
                'message': f'{settings.EMAIL_HOST}:{settings.EMAIL_PORT} –¥–æ—Å—Ç—É–ø–µ–Ω'
            }
        except Exception as e:
            return {
                'name': 'SMTP',
                'status': False,
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    def check_cache(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞"""
        try:
            cache.set('health_check', 'ok', 60)
            value = cache.get('health_check')
            
            if value == 'ok':
                return {
                    'name': '–ö—ç—à',
                    'status': True,
                    'message': '–†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
                }
            else:
                return {
                    'name': '–ö—ç—à',
                    'status': False,
                    'message': '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è'
                }
        except Exception as e:
            return {
                'name': '–ö—ç—à',
                'status': False,
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def check_static_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import os
            static_root = getattr(settings, 'STATIC_ROOT', None)
            
            if static_root and os.path.exists(static_root):
                return {
                    'name': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã',
                    'status': True,
                    'message': f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {static_root} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                }
            else:
                return {
                    'name': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã',
                    'status': False,
                    'message': '–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }
        except Exception as e:
            return {
                'name': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã',
                'status': False,
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            } 